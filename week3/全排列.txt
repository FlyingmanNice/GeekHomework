class Solution {
private:
    //空间换时间，记录遍历过的值
    unordered_map<int,bool> _map;

    void dfs(vector<int>& nums, vector<int>& path,vector<vector<int>>& res)
    {
        if(path.size() == nums.size())
        {
            res.push_back(path);
            return;
        }
        for(int i=0;i<nums.size();++i)
        {
            if(_map[nums[i]]) continue;

            path.push_back(nums[i]);
            _map[nums[i]] = true;
            dfs(nums,path,res);
            _map[nums[i]] = false;
            path.pop_back();
        }
    }
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> path;
        dfs(nums,path,res);
        return res;
    }
};